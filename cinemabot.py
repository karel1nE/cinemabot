import asyncio
import logging
from aiogram import Bot, Dispatcher
from aiogram import F
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.enums import ParseMode
from query_logic import MovieQuery, NoSuchMovieException
from movie_database import MovieDatabase
import os

logging.basicConfig(level=logging.INFO)

bot = Bot(token=os.getenv("BOT_TOKEN"),
          parse_mode=ParseMode.MARKDOWN)

dp = Dispatcher()
db = MovieDatabase()


@dp.message(Command("start"))
async def start_message(message: Message):
    await message.answer(
        """
üëã –ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç CinemaBot ü§ñ. –≠—Ç–æ—Ç –±–æ—Ç –Ω—É–∂–µ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤ üé•. –í–æ—Ç –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

/help ‚Äî –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
/stats ‚Äî –≤—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –≤—Å–µ–º —Ñ–∏–ª—å–º–∞–º –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –∫–æ–≥–¥–∞-–ª–∏–±–æ –∏—Å–∫–∞–ª- 
/history ‚Äî –≤—ã–≤–æ–¥ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ñ–∏–ª—å–º–æ–≤ (–¥–æ 10), –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –∏—Å–∫–∞–ª

‚ùó –ò –Ω–∞–∫–æ–Ω–µ—Ü –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –∏ –ø–æ–ª—É—á–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω—ë–º, –∞ —Ç–∞–∫–∂–µ —Å—Å—ã–ª–∫—É –¥–ª—è –µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ ‚ùó
        
        """
    )


@dp.message(Command("help"))
async def help_message(message: Message):
    await message.answer(
        """
/help ‚Äî –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
/stats ‚Äî –≤—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –≤—Å–µ–º —Ñ–∏–ª—å–º–∞–º –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –∫–æ–≥–¥–∞-–ª–∏–±–æ –∏—Å–∫–∞–ª- 
/history ‚Äî –≤—ã–≤–æ–¥ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ñ–∏–ª—å–º–æ–≤ (–¥–æ 10), –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –∏—Å–∫–∞–ª

‚ùó –ò –Ω–∞–∫–æ–Ω–µ—Ü –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –∏ –ø–æ–ª—É—á–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω—ë–º, –∞ —Ç–∞–∫–∂–µ —Å—Å—ã–ª–∫—É –¥–ª—è –µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ ‚ùó
        """
    )


@dp.message(Command("history"))
async def history_message(message: Message):
    last_movies = db.get_last_movies(message.from_user.full_name)
    answer = "\n\n".join([f"{i + 1}. {row[3]}" for i, row in enumerate(last_movies)])
    await message.answer(f"–ò—Ç–∞–∫... —Ç–≤–æ—è –∏—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞ üîé –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫: \n\n{answer}")


@dp.message(Command("stats"))
async def stats_message(message: Message):
    movie_counts = db.count_movies(message.from_user.full_name)
    answer = ""
    for movie, count in movie_counts:
        answer += f"{movie}, {count} —Ä–∞–∑\n\n"
    await message.answer(f"–í–æ—Ç —Ç–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ü§ì:\n\n{answer}")


@dp.message(F.text)
async def movie_searching(message: Message):
    negative_answer = f"–û—Ö... –ü–æ—Ö–æ–∂–µ —Ç–∞–∫–æ–≥–æ —Ñ–∏–ª—å–º–∞ –Ω–µ—Ç—É üòû"

    try:
        film_data = (await MovieQuery.get_movie_data(message.text))
    except NoSuchMovieException:
        await message.answer(negative_answer)
        return

    film_url = film_data.get('watchLink')
    image_url = film_data.get('posterUrlPreview')
    name = film_data.get('nameRu') if 'nameRu' in film_data else film_data.get('nameEn')
    year = film_data.get('year')
    description = film_data.get('description')
    rating = film_data.get('rating')

    if not image_url or not film_url or not name or not year or not description or not rating:
        await message.answer(negative_answer)
        return

    db.add_movie(message.from_user.full_name, name)
    await message.answer_photo(image_url,
                               f"""
*{name}*

{year}, Rating: {rating}

–û–ø–∏—Å–∞–Ω–∏–µ. {description}

[–°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞]({film_url} 
""", disable_web_page_preview=True)


async def main():
    try:
        await dp.start_polling(bot)
    except KeyboardInterrupt:
        db.close_connection()


if __name__ == "__main__":
    asyncio.run(main())
